{"version":3,"sources":["connect.js","index.js"],"names":["Connect","_this","this","Object","classCallCheck","donate","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","address","IcxTransactionBuilder","networkId","transaction","rawTransaction","wrap","_context","prev","next","console","log","IconBuilder","IconConverter","toBigNumber","from","to","scoreAddress","value","IconAmount","of","Unit","ICX","toLoop","stepLimit","toHex","timestamp","Date","getTime","nid","version","build","toRawTransaction","abrupt","stop","_x","apply","arguments","checkTransaction","param","Promise","resolve","timer","setInterval","tx","transactionResult","iconService","getTransactionResult","clearInterval","execute","alert","failure","message","checkTx","requestAddress","reject","listenerTimeout","setTimeout","window","removeEventListener","eventHandler","event","_event$detail","detail","type","payload","clearTimeout","addEventListener","dispatchEvent","CustomEvent","requestJsonRpc","_event$detail2","jsonrpc","method","params","id","HttpProvider","IconService","provider","Index","props","possibleConstructorReturn","getPrototypeOf","call","onClick","connect","sent","setState","onChange","e","target","onClickSet","_callee2","txHash","res","_context2","objectSpread","state","result","status","ref","innerHTML","react_default","createElement","react","Component","ReactDOM","render","src_Index","document","getElementById"],"mappings":"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","file":"static/js/main.84ebadee.chunk.js","sourcesContent":["\n\nimport IconService, {\n    IconConverter,\n    IconBuilder,\n    IconAmount\n  } from \"icon-sdk-js\";\n\n  \n\n  \nexport default class Connect{\n    constructor() {\n        const { HttpProvider } = IconService;\n\n        //mainnet\n        this.provider = new HttpProvider(\"https://wallet.icon.foundation/api/v3\");\n        this.scoreAddress = \"cx4dd21c1429a616e47940583a1287d5c0e424efbb\";\n        this.nid = \"0x1\";\n\n\n        //testnet\n        // this.provider = new HttpProvider(\"https://bicon.net.solidwallet.io/api/v3\");\n        // this.scoreAddress = \"cxd8357c63ad5020db68ce4473ab21fc6b52791fc4\";\n        // this.nid = \"0x3\";\n\n        \n        this.iconService = new IconService(this.provider);\n        \n    }\n    donate = async (address) =>{\n      console.log(address)\n      const { IcxTransactionBuilder } = IconBuilder;\n      const networkId = IconConverter.toBigNumber(1);\n      const transaction = new IcxTransactionBuilder()\n          .from(address.address)\n          .to(this.scoreAddress)\n          .value(IconAmount.of(10, IconAmount.Unit.ICX).toLoop())\n          .stepLimit(IconConverter.toHex(1000000))\n          .timestamp((new Date()).getTime() * 1000)\n          .nid(networkId)\n          .version(IconConverter.toHex(3))\n          .build();\n      const rawTransaction = IconConverter.toRawTransaction(transaction);\n      return rawTransaction\n    }\n      checkTransaction = param =>\n      new Promise(resolve => {\n        let timer;\n        const checkTx = tx => {\n          const transactionResult = this.iconService.getTransactionResult(tx);\n          if (transactionResult) {\n            clearInterval(timer);\n            resolve(transactionResult.execute());\n          } else {\n            clearInterval(timer);\n            alert(transactionResult.failure.message);\n          }\n        };\n        timer = setInterval(() => {\n          checkTx(param);\n        }, 5000);\n      });\n  \n\n       requestAddress = () => {\n        return new Promise((resolve, reject) => {\n          const listenerTimeout = setTimeout(() => {\n            window.removeEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n            reject(\"timeout\");\n          }, 10000);\n          window.addEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.dispatchEvent(\n            new CustomEvent(\"ICONEX_RELAY_REQUEST\", {\n              detail: {\n                type: \"REQUEST_ADDRESS\"\n              }\n            })\n          );\n          function eventHandler(event) {\n            const { type, payload } = event.detail;\n            if (type === \"RESPONSE_ADDRESS\") {\n              window.removeEventListener(\n                \"ICONEX_RELAY_RESPONSE\",\n                eventHandler,\n                false\n              );\n              clearTimeout(listenerTimeout);\n              resolve(payload);\n              console.log(payload);\n            }\n          }\n        });\n      }\n      \n     requestJsonRpc =(rawTransaction)=> {\n        return new Promise(resolve => {\n          window.removeEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.addEventListener(\"ICONEX_RELAY_RESPONSE\", eventHandler, false);\n          window.dispatchEvent(\n            new CustomEvent(\"ICONEX_RELAY_REQUEST\", {\n              detail: {\n                type: \"REQUEST_JSON-RPC\",\n                payload: {\n                  jsonrpc: \"2.0\",\n                  method: \"icx_sendTransaction\",\n                  params: rawTransaction,\n                  id: new Date().getTime()\n                }\n              }\n            })\n          );\n          function eventHandler(event) {\n            const { type, payload } = event.detail;\n            if (type === \"RESPONSE_JSON-RPC\") {\n              window.removeEventListener(\n                \"ICONEX_RELAY_RESPONSE\",\n                eventHandler,\n                false\n              );\n              resolve(payload);\n            }\n          }\n        });\n      }\n}","import React, { Component, Fragment } from 'react'\nimport ReactDOM from 'react-dom';\nimport Connect from './connect';\n\nimport './index.css'\nexport default class Index extends Component {\n    constructor(props) {\n        super(props)\n      \n        this.state = {\n          address:''\n        }\n        this.connect = new Connect()\n      }\n    onClick = async () => {\n        const address = await this.connect.requestAddress();\n        if(address){\n            this.setState({\n                address\n            })\n        }\n    }\n    onChange=(e)=>{\n        this.setState({\n           message:e.target.value\n        })\n    }\n    onClickSet = async ()=>{\n        const transaction = await this.connect.donate({...this.state});\n        const txHash = await this.connect.requestJsonRpc(transaction);\n        const res = await this.connect.checkTransaction(txHash.result);\n        if(res.status ===1 && res.txHash){\n            this.ref.innerHTML = res.txHash\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n            <div><p>어린이가 살기 좋은 세상은 모두가 살기 좋은 세상입니다</p> <p>당신의 아이콘으로 살기 좋은 세상을 만들어주세요</p>\n            <div><button onClick={this.onClick}>지갑선택</button> \n            <button onClick={this.onClickSet}>10ICX 기부하기</button></div></div>\n            </Fragment>\n        )\n    }\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n;\n"],"sourceRoot":""}